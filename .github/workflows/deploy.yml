on:
  push:
    branches:
      - testCompilation
  workflow_dispatch:
jobs:
  run_pull:
    name: run pull
    runs-on: ubuntu-latest

    steps:
      - name: Get list of modified files
        id: modified-files
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: { files } } = await github.rest.repos.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha
            });
            const fileNames = files.map(f => f.filename).join(' ');
            core.setOutput('files', fileNames);
      - name: Iterate and process each modified file via SSH
        run: |
          start_deploy="false"
          for file in ${{ steps.modified-files.outputs.files }}; do
              echo "Fue modificado $file"
              if [[ ! "$file" =~ ".yml" ]]; then
                  start_deploy="true"
              fi
          done
          echo "start_deploy<<EOF" >> $GITHUB_ENV
          echo "$start_deploy" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: executing remote ssh commands using ssh key
        if: env.start_deploy == 'true'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            ssh -i ~/id_rsaalain mome@192.168.0.212 '
            set -e &&
            cd galileo-dev-v1.1/${{ secrets.SERVICIO }} &&
            if [ ! -d "galileo_servicio_web" ]; then
              echo "validada galileo-dev-v1.1/${{ secrets.SERVICIO }}/galileo_servicio_web" &&
              git clone https://github.com/apuenteCountigo/galileo_servicio_web.git
            fi
            cd galileo_servicio_web
            git fetch origin &&
            git checkout testCompilation &&
            git reset --hard origin/testCompilation &&
            git pull &&
            cd ../../ &&
            CONTAINER_NAME="webapp" &&
            CN=$(docker ps -a --filter name="^webapp$" --format "{{.Names}}") &&
            echo "Nombre del contenedor encontrado: $CN" &&
            if [[ -n "$CN" ]]; then
              echo "Dentro: Contenedor encontrado - $CONTAINER_NAME" &&
              IMAGE_NAME=$(docker inspect --format='{{.Config.Image}}' "$CONTAINER_NAME" 2>/dev/null) || { echo "Error: No se pudo inspeccionar el contenedor $CONTAINER_NAME"; exit 1; }
              if [[ -n "$IMAGE_NAME" ]]; then
                echo "Imagen encontrada: $IMAGE_NAME" &&
                docker stop "$CONTAINER_NAME" &&
                docker rm "$CONTAINER_NAME" &&
                docker rmi "$IMAGE_NAME" &&
                echo "Imagen $IMAGE_NAME eliminada correctamente."
              else
                echo "El contenedor $CONTAINER_NAME no existe o no tiene imagen asociada"
              fi
            else
              echo "No se encontró ningún contenedor llamado $CONTAINER_NAME"
            fi &&
            docker compose up web-build -d &&
            docker compose up servicio-${{ secrets.SERVICIO }} -d &&
            yes | sudo docker builder prune'
            exit
